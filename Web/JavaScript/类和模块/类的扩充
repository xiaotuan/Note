JavaScript 中基于原型的继承机制是动态的：对象从其原型继承属性，如果创建对象之后原型的属性发生改变，也会影响到继承这个原型的所有实例对象。这意味着我们可以通过给原型对象添加新方法来扩充 JavaScript 类。例如给 Complex 类添加方法来计算复数的共轭复数：

```js
// 返回当前复数的共轭复数
Complex.prototype.conj = function() {
    return new Complex(this.r, -this.i);
};
```

JavaScript 内置类的原型对象也是一样如此 “开放”，也就是说可以给数字、字符串、数组、函数等数据类型添加方法。

```js
// 多次调用这个函数 f，传入一个迭代数
// 比如，要输出 "hello" 三次
// var n = 3;
// n.times(function(n) { console.log(n + " hello"); });
Number.prototype.times = function(f, context) {
    var n = Number(this);
    for (var i = 0; i < n; i++) {
        f.call(context, i);
    }
};
// 如果不存在 ES5 的 String.trim() 方法的话，就定义它
// 这个方法用以去除字符串开头和结尾的空格
String.prototype.trim = String.prototype.trim ||function() {
    if (!this) {
        return this;	// 空字符串不做处理
    }
    return this.replace(/^\s+|\s+$/g, "");	// 使用正则表达式进行空格替换
};
// 返回函数的名字，如果它有（非标准的）name 属性，则直接使用 name 属性
// 否则，将函数转换为字符串然后从中提取名字
// 如果是没有名字的函数，则返回一个空字符串
Function.prototype.getName = function() {
    return this.name || this.toString().match(/function\s*([^()*]\(/)[1];
};
```

